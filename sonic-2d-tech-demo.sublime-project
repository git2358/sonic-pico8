{
	"build_systems":
	[
		{
			"name": "Dev: analyze engine scripts (intermediate release)",
			"shell": true,
			"working_dir": "${project_path}",
			"cmd": ["pico-boots/scripts/analyze.py intermediate/release/pico-boots"],
			"file_regex": "\"(.*\\.py)\"(?:, line )([\\d]+)(?:\\:)?([\\d]+)?(.*)",
			"syntax": "Packages/Python/Python.sublime-syntax"
		},
		{
			"name": "Dev: analyze game scripts (intermediate release)",
			"shell": true,
			"working_dir": "${project_path}",
			"cmd": ["pico-boots/scripts/analyze.py intermediate/release/src"],
			"file_regex": "\"(.*\\.py)\"(?:, line )([\\d]+)(?:\\:)?([\\d]+)?(.*)",
			"syntax": "Packages/Python/Python.sublime-syntax"
		},
		{
			"name": "Game: edit data",
			"shell": true,
			"cmd": ["./edit_data.sh"],
			"working_dir": "${project_path}"
		},
		{
			"name": "Game: edit metadata",
			"shell": true,
			"cmd": ["./edit_metadata.sh"],
			"working_dir": "${project_path}"
		},
		{
			"name": "Game: build game",
			"working_dir": "${project_path}",
			"shell": true,
			"cmd": ["./build_game.sh debug"],
			"file_regex": "(.*\\.sh)(?:\\: line )([\\d]+)(?:\\:)([\\d]+)? (.*)",
			"syntax": "Packages/Python/Python.sublime-syntax",
			"variants":
			[
				{
					"name": "debug",
					"cmd": ["./build_game.sh debug"]
				},
				{
					"name": "debug-ultrafast",
					"cmd": ["./build_game.sh debug-ultrafast"]
				},
				{
					"name": "cheat",
					"cmd": ["./build_game.sh cheat"]
				},
				{
					"name": "ultrafast",
					"cmd": ["./build_game.sh ultrafast"]
				},
				{
					"name": "cheat-ultrafast",
					"cmd": ["./build_game.sh cheat-ultrafast"]
				},
				{
					"name": "sandbox",
					"cmd": ["./build_game.sh sandbox"]
				},
				{
					"name": "release",
					"cmd": ["./build_game.sh release"]
				}
			]
		},
		{
			"name": "Game: build itests",
			"working_dir": "${project_path}",
			"shell": true,
			"cmd": ["./build_itest.sh"],
			"file_regex": "(.*\\.sh)(?:\\: line )([\\d]+)(?:\\:)([\\d]+)? (.*)",
			"syntax": "Packages/Python/Python.sublime-syntax"
		},
		{
			"name": "Game: build and reload or run",
			"working_dir": "${project_path}",
			"shell": true,
			"cmd": ["./build_game.sh debug && (./pico-boots/scripts/reload.sh || ./run_game.sh debug)"],
			"file_regex": "(.*\\.sh)(?:\\: line )([\\d]+)(?:\\:)([\\d]+)? (.*)",
			"syntax": "Packages/Python/Python.sublime-syntax",
			"variants":
			[
				{
					"name": "debug",
					"cmd": ["./build_game.sh debug && (./pico-boots/scripts/reload.sh || ./run_game.sh debug)"]
				},
				{
					"name": "debug-ultrafast",
					"cmd": ["./build_game.sh debug-ultrafast && (./pico-boots/scripts/reload.sh || ./run_game.sh debug-ultrafast)"]
				},
				{
					"name": "cheat",
					"cmd": ["./build_game.sh cheat && (./pico-boots/scripts/reload.sh || ./run_game.sh cheat)"]
				},
				{
					"name": "ultrafast",
					"cmd": ["./build_game.sh ultrafast && (./pico-boots/scripts/reload.sh || ./run_game.sh ultrafast)"]
				},
				{
					"name": "cheat-ultrafast",
					"cmd": ["./build_game.sh cheat-ultrafast && (./pico-boots/scripts/reload.sh || ./run_game.sh cheat-ultrafast)"]
				},
				{
					"name": "sandbox",
					"cmd": ["./build_game.sh sandbox && (./pico-boots/scripts/reload.sh || ./run_game.sh sandbox)"]
				},
				{
					"name": "release",
					"cmd": ["./build_game.sh release && (./pico-boots/scripts/reload.sh || ./run_game.sh release)"]
				}
			]
		},
		{
			"name": "Game: build and reload or run itests",
			"working_dir": "${project_path}",
			"shell": true,
			"cmd": ["./build_itest.sh && (./pico-boots/scripts/reload.sh || ./run_itest.sh)"],
			"file_regex": "(.*\\.sh)(?:\\: line )([\\d]+)(?:\\:)([\\d]+)? (.*)",
			"syntax": "Packages/Python/Python.sublime-syntax"
		},
		{
			"name": "Game: start",
			"working_dir": "${project_path}",
			"shell": true,
			"cmd": ["./run_game.sh debug"],
			"syntax": "Packages/Python/Python.sublime-syntax",
			"variants":
			[
				{
					"name": "debug",
					"cmd": ["./run_game.sh debug"]
				},
				{
					"name": "debug-ultrafast",
					"cmd": ["./run_game.sh debug-ultrafast"]
				},
				{
					"name": "cheat",
					"cmd": ["./run_game.sh cheat"]
				},
				{
					"name": "ultrafast",
					"cmd": ["./run_game.sh ultrafast"]
				},
				{
					"name": "cheat-ultrafast",
					"cmd": ["./run_game.sh cheat-ultrafast"]
				},
				{
					"name": "sandbox",
					"cmd": ["./run_game.sh sandbox"]
				},
				{
					"name": "release",
					"cmd": ["./run_game.sh release"]
				},
				{
					"name": "itests",
					"cmd": ["./run_itest.sh"],
				}
			]
		},
		{
			"name": "Game: install cartridge (Linux)",
			"working_dir": "${project_path}",
			"shell": true,
			"cmd": ["./install_cartridge_linux.sh debug"],
			"syntax": "Packages/Python/Python.sublime-syntax",
			"variants":
			[
				{
					"name": "debug",
					"cmd": ["./install_cartridge_linux.sh debug"]
				},
				{
					"name": "debug-ultrafast",
					"cmd": ["./install_cartridge_linux.sh debug-ultrafast"]
				},
				{
					"name": "cheat",
					"cmd": ["./install_cartridge_linux.sh cheat"]
				},
				{
					"name": "ultrafast",
					"cmd": ["./install_cartridge_linux.sh ultrafast"]
				},
				{
					"name": "cheat-ultrafast",
					"cmd": ["./install_cartridge_linux.sh cheat-ultrafast"]
				},
				{
					"name": "sandbox",
					"cmd": ["./install_cartridge_linux.sh sandbox"]
				},
				{
					"name": "release",
					"cmd": ["./install_cartridge_linux.sh release"]
				},
				{
					"name": "debug (png)",
					"cmd": ["./install_cartridge_linux.sh debug png"]
				},
				{
					"name": "debug (png)-ultrafast",
					"cmd": ["./install_cartridge_linux.sh debug-ultrafast png"]
				},
				{
					"name": "cheat (png)",
					"cmd": ["./install_cartridge_linux.sh cheat png"]
				},
				{
					"name": "ultrafast (png)",
					"cmd": ["./install_cartridge_linux.sh ultrafast png"]
				},
				{
					"name": "cheat (png)-ultrafast",
					"cmd": ["./install_cartridge_linux.sh cheat-ultrafast png"]
				},
				{
					"name": "sandbox (png)",
					"cmd": ["./install_cartridge_linux.sh sandbox png"]
				},
				{
					"name": "release (png)",
					"cmd": ["./install_cartridge_linux.sh release png"]
				}
			]
		},
		{
			"name": "Game: test",
			"working_dir": "${project_path}",
			"shell": true,
			"cmd": ["./test.sh -f $file_base_name"],
			// known limitation: last \n won't be detected in build output, so cannot display multi-line errors
			"file_regex": "((?:pico-boots/src|src)\\/[-\\w\\/]+\\.lua)(?:\\:| @ )([\\d]+)(?:\\:)?([\\d]+)?\\n?(.*)",
			"syntax": "Packages/Python/Python.sublime-syntax",
			"variants":
			[
				{
					"name": "(solo)",
					"cmd": ["./test.sh -f $file_base_name -m solo"]
				},
				{
					"name": "(all)",
					"cmd": ["./test.sh -f $file_base_name -m all"]
				},
				{
					"name": "*",
					"cmd": ["./test.sh"]
				},
				{
					"name": "* (solo)",
					"cmd": ["./test.sh -m solo"]
				},
				{
					"name": "* (all)",
					"cmd": ["./test.sh -m all"]
				},
				{
					"name": "application",
					"cmd": ["./test.sh application"],
				},
				{
					"name": "ingame",
					"cmd": ["./test.sh ingame"],
				},
				{
					"name": "itest",
					"cmd": ["./test.sh itest"],
				},
				{
					"name": "menu",
					"cmd": ["./test.sh menu"],
				},
				{
					"name": "platformer",
					"cmd": ["./test.sh platformer"],
				},
				{
					"name": "test_data",
					"cmd": ["./test.sh test_data"],
				},
				{
					"name": "headless_itests",
					"cmd": ["./test.sh -f headless_itests"],
				},
				{
					"name": "headless_itests (render)",
					"cmd": ["./test.sh -f headless_itests"],
					"env": {
						"ENABLE_RENDER": "1"
					}
				},
				{
					"name": "headless_itests - solo",
					"cmd": ["./test.sh -f headless_itests -m solo"],
				},
				{
					"name": "headless_itests - solo (render)",
					"cmd": ["./test.sh -f headless_itests -m solo"],
					"env": {
						"ENABLE_RENDER": "1"
					}
				}
			]
		},
		{
			"name": "Engine: test",
			"working_dir": "${project_path}/pico-boots",
			"shell": true,
			"cmd": ["./test.sh -f $file_base_name"],
			// known limitation: last \n won't be detected in build output, so cannot display multi-line errors
			"file_regex": "((?:src)\\/[-\\w\\/]+\\.lua)(?:\\:| @ )([\\d]+)(?:\\:)?([\\d]+)?\\n?(.*)",
			"syntax": "Packages/Python/Python.sublime-syntax",
			"variants":
			[
				{
					"name": "(solo)",
					"cmd": ["./test.sh -f $file_base_name -m solo"]
				},
				{
					"name": "(all)",
					"cmd": ["./test.sh -f $file_base_name -m all"]
				},
				{
					"name": "*",
					"cmd": ["./test.sh"]
				},
				{
					"name": "* (solo)",
					"cmd": ["./test.sh -m solo"]
				},
				{
					"name": "* (all)",
					"cmd": ["./test.sh -m all"]
				}
			]
		},
		{
			"name": "All: test",
			"working_dir": "${project_path}",
			"shell": true,
			// note that luacov report is generated in the working directory, so the second test report will overwrite the previous one
			"cmd": ["./test.sh && echo '' && pico-boots/test.sh"],
			// known limitation: last \n won't be detected in build output, so cannot display multi-line errors
			"file_regex": "((?:pico-boots/src|src)\\/[-\\w\\/]+\\.lua)(?:\\:| @ )([\\d]+)(?:\\:)?([\\d]+)?\\n?(.*)",
			"syntax": "Packages/Python/Python.sublime-syntax",
			"variants":
			[
				{
					// if you aim for 100% coverage including render methods
					"name": "(render)",
					"cmd": ["./test.sh && echo '' && pico-boots/test.sh"],
					"env": {
						"ENABLE_RENDER": "1"
					}
				}
			]
		},
		{
			"name": "Engine: Postbuild: test add_metadata",
			"working_dir": "${project_path}/pico-boots",
			"shell": true,
			"cmd": ["python3 -m scripts.test_add_metadata"],
			"file_regex": "\"(.*\\.py)\"(?:, line )([\\d]+)(?:\\:)?([\\d]+)?(.*)",
			"syntax": "Packages/Python/Python.sublime-syntax"
		},
		{
			"name": "Engine: Postbuild: test add_require",
			"working_dir": "${project_path}/pico-boots",
			"shell": true,
			"cmd": ["python3 -m scripts.test_add_require"],
			"file_regex": "\"(.*\\.py)\"(?:, line )([\\d]+)(?:\\:)?([\\d]+)?(.*)",
			"syntax": "Packages/Python/Python.sublime-syntax"
		},
		{
			"name": "Engine: Postbuild: test analyze",
			"working_dir": "${project_path}/pico-boots",
			"shell": true,
			"cmd": ["python3 -m scripts.test_analyze"],
			"file_regex": "\"(.*\\.py)\"(?:, line )([\\d]+)(?:\\:)?([\\d]+)?(.*)",
			"syntax": "Packages/Python/Python.sublime-syntax"
		},
		{
			"name": "Engine: Postbuild: test minify",
			"working_dir": "${project_path}/pico-boots",
			"shell": true,
			"cmd": ["python3 -m scripts.test_minify"],
			"file_regex": "\"(.*\\.py)\"(?:, line )([\\d]+)(?:\\:)?([\\d]+)?(.*)",
			"syntax": "Packages/Python/Python.sublime-syntax"
		},
		{
			"name": "Engine: Postbuild: test preprocess",
			"working_dir": "${project_path}/pico-boots",
			"shell": true,
			"cmd": ["python3 -m scripts.test_preprocess"],
			"file_regex": "\"(.*\\.py)\"(?:, line )([\\d]+)(?:\\:)?([\\d]+)?(.*)",
			"syntax": "Packages/Python/Python.sublime-syntax"
		},
		{
			"name": "Python (legacy): test replace_strings",
			"working_dir": "${project_path}",
			"shell": true,
			"cmd": ["python3 -m prebuild.test_replace_strings"],
			"file_regex": "\"(.*\\.py)\"(?:, line )([\\d]+)(?:\\:)?([\\d]+)?, (.*)",
			"syntax": "Packages/Python/Python.sublime-syntax"
		},
		{
			"name": "lua: parse",
			"selector": "source.lua,source.p8",
			"working_dir": "${project_path}",
			"shell": true,
			"cmd": ["luac -p $file"],
			"file_regex": "((?:src|tests)\\/[-\\w\\/]+\\.lua)(?:\\:| @ )([\\d]+)(?:\\:)?([\\d]+)?\\n?(.*)"
		},
	],
	"folders":
	[
		{
			"folder_exclude_patterns":
			[
				"backup",
				"carts"
			],
			"path": "~/.lexaloffle/pico-8"
		},
		{
			"folder_exclude_patterns":
			[
				".git",
				"backup",
				"build",
				"intermediate"
			],
			"path": "."
		}
	],
	"syntax_override":
	{
		"\\.lua$":
		[
			"PICO-8/PICO-8"
		],
		"\\.luacov":
		[
			"Lua/Lua"
		]
	}
}
