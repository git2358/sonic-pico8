{
	"build_systems":
	[
		{
			"name": "p8tool: build current",
			"working_dir": "${project_path}",
			"shell": true,
			"cmd": ["./build.sh $file_base_name debug"],
			"file_regex": "(.*\\.sh)(?:\\: line )([\\d]+)(?:\\:)([\\d]+)? (.*)",
			"syntax": "Packages/Python/Python.sublime-syntax",
			"variants":
			[
				{
					"name": "assert",
					"cmd": ["./build.sh $file_base_name assert"]
				},
				{
					"name": "itest",
					"cmd": ["./build.sh $file_base_name itest"]
				},
				{
					"name": "itest_light",
					"cmd": ["./build.sh $file_base_name itest_light"]
				},
				{
					"name": "profiler",
					"cmd": ["./build.sh $file_base_name profiler"]
				},
				{
					"name": "visual_log",
					"cmd": ["./build.sh $file_base_name visual_log"]
				},
				{
					"name": "log",
					"cmd": ["./build.sh $file_base_name log"]
				},
				{
					"name": "release",
					"cmd": ["./build.sh $file_base_name release"]
				},
			]
		},
		{
			"name": "p8tool: build and run or reload current",
			"working_dir": "${project_path}",
			"shell": true,
			"cmd": ["./build.sh $file_base_name debug && (./reload.sh || ./run.sh $file_base_name debug)"],
			"file_regex": "(.*\\.sh)(?:\\: line )([\\d]+)(?:\\:)([\\d]+)? (.*)",
			"syntax": "Packages/Python/Python.sublime-syntax",
			"variants":
			[
				{
					"name": "assert",
					"cmd": ["./build.sh $file_base_name assert && (./reload.sh || ./run.sh $file_base_name assert)"]
				},
				{
					"name": "itest",
					"cmd": ["./build.sh $file_base_name itest && (./reload.sh || ./run.sh $file_base_name itest)"]
				},
				{
					"name": "itest_light",
					"cmd": ["./build.sh $file_base_name itest_light && (./reload.sh || ./run.sh $file_base_name itest_light)"]
				},
				{
					"name": "profiler",
					"cmd": ["./build.sh $file_base_name profiler && (./reload.sh || ./run.sh $file_base_name profiler)"]
				},
				{
					"name": "visual_log",
					"cmd": ["./build.sh $file_base_name visual_log && (./reload.sh || ./run.sh $file_base_name visual_log)"]
				},
				{
					"name": "pico8_utest (headless)",
					"cmd": ["./build.sh $file_base_name pico8_utest && (./reload.sh || ./run.sh $file_base_name pico8_utest '-x; exec bash')"]
				},
				{
					"name": "log",
					"cmd": ["./build.sh $file_base_name log && (./reload.sh || ./run.sh $file_base_name log)"]
				},
				{
					"name": "release",
					"cmd": ["./build.sh $file_base_name release && (./reload.sh || ./run.sh $file_base_name release)"]
				},
			]
		},
		{
			"name": "p8tool: run current",
			"working_dir": "${project_path}",
			"shell": true,
			"cmd": ["./run.sh $file_base_name debug"],
			"variants":
			[
				{
					"name": "assert",
					"cmd": ["./run.sh $file_base_name assert"]
				},
				{
					"name": "itest",
					"cmd": ["./run.sh $file_base_name itest"]
				},
				{
					"name": "itest_light",
					"cmd": ["./run.sh $file_base_name itest_light"]
				},
				{
					"name": "profiler",
					"cmd": ["./run.sh $file_base_name profiler"]
				},
				{
					"name": "visual_log",
					"cmd": ["./run.sh $file_base_name visual_log"]
				},
				{
					"name": "log",
					"cmd": ["./run.sh $file_base_name log"]
				},
				{
					"name": "release",
					"cmd": ["./run.sh $file_base_name release"]
				},
			]
		},
		{
			"name": "p8tool: install game cartridge",
			"working_dir": "${project_path}",
			"shell": true,
			"cmd": ["./install.sh sonic-pico8_debug.p8.png"],
			"variants":
			[
				{
					"name": "assert",
					"cmd": ["./install.sh sonic-pico8_assert.p8.png"],
				},
				{
					"name": "itest",
					"cmd": ["./install.sh sonic-pico8_itest.p8.png"],
				},
				{
					"name": "itest_light",
					"cmd": ["./install.sh sonic-pico8_itest_light.p8.png"],
				},
				{
					"name": "profiler",
					"cmd": ["./install.sh sonic-pico8_profiler.p8.png"],
				},
				{
					"name": "visual_log",
					"cmd": ["./install.sh sonic-pico8_visual_log.p8.png"],
				},
				{
					"name": "log",
					"cmd": ["./install.sh sonic-pico8_log.p8.png"],
				},
				{
					"name": "release",
					"cmd": ["./install.sh sonic-pico8_release.p8.png"],
				},
			]
		},
		{
			"name": "p8tool: edit data",
			"shell": true,
			"cmd": ["pico8 -run data/data.p8"],
			"working_dir": "${project_path}"
		},
		{
			"name": "python: test preprocess",
			"working_dir": "${project_path}",
			"shell": true,
			"cmd": ["python3 -m prebuild.test_preprocess"],
			"file_regex": "\"(.*\\.py)\"(?:, line )([\\d]+)(?:\\:)?([\\d]+)?, (.*)",
			"syntax": "Packages/Python/Python.sublime-syntax"
		},
		{
			"name": "python: test replace_strings",
			"working_dir": "${project_path}",
			"shell": true,
			"cmd": ["python3 -m prebuild.test_replace_strings"],
			"file_regex": "\"(.*\\.py)\"(?:, line )([\\d]+)(?:\\:)?([\\d]+)?, (.*)",
			"syntax": "Packages/Python/Python.sublime-syntax"
		},
		{
			"name": "python: test add_metadata",
			"working_dir": "${project_path}",
			"shell": true,
			"cmd": ["python3 -m postbuild.test_add_metadata"],
			"file_regex": "\"(.*\\.py)\"(?:, line )([\\d]+)(?:\\:)?([\\d]+)?, (.*)",
			"syntax": "Packages/Python/Python.sublime-syntax"
		},
		{
			"name": "lua: parse",
			"selector": "source.lua,source.p8",
			"working_dir": "${project_path}",
			"shell": true,
			"cmd": ["luac -p $file"],
			"file_regex": "((?:src|tests)\\/[-\\w\\/]+\\.lua)(?:\\:| @ )([\\d]+)(?:\\:)?([\\d]+)?\\n?(.*)"
		},
		{
			"name": "busted: test",
			"working_dir": "${project_path}",
			"shell": true,
			// use current file name to decide what to test
			// works from both src module and the corresponding test
			"cmd": ["./test.sh $file_base_name"],
			// file regex works fine except for last \n which apparently doesn't work in build output
			"file_regex": "((?:src|tests)\\/[-\\w\\/]+\\.lua)(?:\\:| @ )([\\d]+)(?:\\:)?([\\d]+)?\\n?(.*)",
			"env": {
				"SUBLIME_TEXT": "YES"
			},
			"syntax": "Packages/Python/Python.sublime-syntax",
			"variants":
			[
				{
					"name": "current (solo)",
					"cmd": ["./test.sh $file_base_name solo"],
				},
				{
					"name": "current (all)",
					"cmd": ["./test.sh $file_base_name all"],
				},
				{
					"name": "all",
					"cmd": ["./test.sh all"],
				},
				{
					"name": "all (solo)",
					"cmd": ["./test.sh all solo"],
				},
				{
					"name": "all (all)",
					"cmd": ["./test.sh all all"],
				},
				{
					"name": "assertions",
					"cmd": ["./test.sh assertions"],
				},
				{
					"name": "class",
					"cmd": ["./test.sh class"],
				},
				{
					"name": "codetuner",
					"cmd": ["./test.sh codetuner"],
				},
				{
					"name": "color",
					"cmd": ["./test.sh color"],
				},
				{
					"name": "coroutine",
					"cmd": ["./test.sh coroutine"],
				},
				{
					"name": "credits",
					"cmd": ["./test.sh credits"],
				},
				{
					"name": "debug",
					"cmd": ["./test.sh debug"],
				},
				{
					"name": "flow",
					"cmd": ["./test.sh flow"],
				},
				{
					"name": "helper",
					"cmd": ["./test.sh helper"],
				},
				{
					"name": "input",
					"cmd": ["./test.sh input"],
				},
				{
					"name": "integrationtest",
					"cmd": ["./test.sh integrationtest"],
				},
				{
					"name": "math",
					"cmd": ["./test.sh math"],
				},
				{
					"name": "playercharacter",
					"cmd": ["./test.sh playercharacter"],
				},
				{
					"name": "profiler",
					"cmd": ["./test.sh profiler"],
				},
				{
					"name": "sprite",
					"cmd": ["./test.sh sprite"],
				},
				{
					"name": "stage",
					"cmd": ["./test.sh stage"],
				},
				{
					"name": "titlemenu",
					"cmd": ["./test.sh titlemenu"],
				},
				{
					"name": "ui",
					"cmd": ["./test.sh ui"],
				},
				{
					"name": "headless_itests",
					"cmd": ["./test.sh headless_itests"],
				},
			],
		},
	],
	"folders":
	[
		{
			"folder_exclude_patterns":
			[
				"backup",
				"carts"
			],
			"path": "~/.lexaloffle/pico-8"
		},
		{
			"folder_exclude_patterns":
			[
				".git",
				"build",
				"intermediate",
				"__pycache__"
			],
			"path": "."
		}
	],
	"syntax_override":
	{
		"\\.lua$":
		[
			"PICO-8/PICO-8"
		]
	}
}
